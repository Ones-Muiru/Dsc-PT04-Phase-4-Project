{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b3daecaf-12fa-4919-8d71-babfb495572e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from surprise import Dataset, Reader, SVD\n",
    "from surprise.model_selection import train_test_split\n",
    "from surprise import accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "438d560a-d9e2-4e7a-a9a7-5245524ef11a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import streamlit as st\n",
    "import pandas as pd\n",
    "import zipfile\n",
    "\n",
    "# Extract the CSV file from the zip archive\n",
    "with zipfile.ZipFile('clean_dataset.zip', 'r') as zipf:\n",
    "    zipf.extractall()\n",
    "\n",
    "# Load the clean DataFrame\n",
    "df_clean = pd.read_csv('clean_dataset.csv')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "845af720-a039-4610-af0c-b664dfc6f08d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fit</th>\n",
       "      <th>user_id</th>\n",
       "      <th>bust_size</th>\n",
       "      <th>item_id</th>\n",
       "      <th>weight</th>\n",
       "      <th>rating</th>\n",
       "      <th>rented_for</th>\n",
       "      <th>review_text</th>\n",
       "      <th>body_type</th>\n",
       "      <th>review_summary</th>\n",
       "      <th>category</th>\n",
       "      <th>height</th>\n",
       "      <th>size</th>\n",
       "      <th>age</th>\n",
       "      <th>review_date</th>\n",
       "      <th>processed_review</th>\n",
       "      <th>processed_summary</th>\n",
       "      <th>sentiment_score</th>\n",
       "      <th>hybrid_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>fit</td>\n",
       "      <td>420272</td>\n",
       "      <td>34d</td>\n",
       "      <td>2260466</td>\n",
       "      <td>137.0</td>\n",
       "      <td>5</td>\n",
       "      <td>vacation</td>\n",
       "      <td>An adorable romper! Belt and zipper were a lit...</td>\n",
       "      <td>hourglass</td>\n",
       "      <td>So many compliments!</td>\n",
       "      <td>romper</td>\n",
       "      <td>172.72</td>\n",
       "      <td>14</td>\n",
       "      <td>28.0</td>\n",
       "      <td>April 20, 2016</td>\n",
       "      <td>['ador', 'romper', 'belt', 'zipper', 'littl', ...</td>\n",
       "      <td>['mani', 'compliment']</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>5.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>fit</td>\n",
       "      <td>273551</td>\n",
       "      <td>34b</td>\n",
       "      <td>153475</td>\n",
       "      <td>132.0</td>\n",
       "      <td>5</td>\n",
       "      <td>other</td>\n",
       "      <td>I rented this dress for a photo shoot. The the...</td>\n",
       "      <td>straight &amp; narrow</td>\n",
       "      <td>I felt so glamourous!!!</td>\n",
       "      <td>gown</td>\n",
       "      <td>167.64</td>\n",
       "      <td>12</td>\n",
       "      <td>36.0</td>\n",
       "      <td>June 18, 2013</td>\n",
       "      <td>['rent', 'dress', 'photo', 'shoot', 'theme', '...</td>\n",
       "      <td>['felt', 'glamour']</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>fit</td>\n",
       "      <td>909926</td>\n",
       "      <td>34c</td>\n",
       "      <td>126335</td>\n",
       "      <td>135.0</td>\n",
       "      <td>4</td>\n",
       "      <td>formal affair</td>\n",
       "      <td>I rented this for my company's black tie award...</td>\n",
       "      <td>pear</td>\n",
       "      <td>Dress arrived on time and in perfect condition.</td>\n",
       "      <td>dress</td>\n",
       "      <td>165.10</td>\n",
       "      <td>8</td>\n",
       "      <td>34.0</td>\n",
       "      <td>February 12, 2014</td>\n",
       "      <td>['rent', 'compani', 'black', 'tie', 'award', '...</td>\n",
       "      <td>['dress', 'arriv', 'time', 'perfect', 'condit']</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>fit</td>\n",
       "      <td>151944</td>\n",
       "      <td>34b</td>\n",
       "      <td>616682</td>\n",
       "      <td>145.0</td>\n",
       "      <td>5</td>\n",
       "      <td>wedding</td>\n",
       "      <td>I have always been petite in my upper body and...</td>\n",
       "      <td>athletic</td>\n",
       "      <td>Was in love with this dress !!!</td>\n",
       "      <td>gown</td>\n",
       "      <td>175.26</td>\n",
       "      <td>12</td>\n",
       "      <td>27.0</td>\n",
       "      <td>September 26, 2016</td>\n",
       "      <td>['alway', 'petit', 'upper', 'bodi', 'extrem', ...</td>\n",
       "      <td>['love', 'dress']</td>\n",
       "      <td>0.976562</td>\n",
       "      <td>5.976562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>fit</td>\n",
       "      <td>734848</td>\n",
       "      <td>32b</td>\n",
       "      <td>364092</td>\n",
       "      <td>138.0</td>\n",
       "      <td>4</td>\n",
       "      <td>date</td>\n",
       "      <td>Didn't actually wear it. It fit perfectly. The...</td>\n",
       "      <td>athletic</td>\n",
       "      <td>Traditional with a touch a sass</td>\n",
       "      <td>dress</td>\n",
       "      <td>172.72</td>\n",
       "      <td>8</td>\n",
       "      <td>45.0</td>\n",
       "      <td>April 30, 2016</td>\n",
       "      <td>['actual', 'wear', 'fit', 'perfectli', 'fabric...</td>\n",
       "      <td>['tradit', 'touch', 'sass']</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fit  user_id bust_size  item_id  weight  rating     rented_for  \\\n",
       "0  fit   420272       34d  2260466   137.0       5       vacation   \n",
       "1  fit   273551       34b   153475   132.0       5          other   \n",
       "2  fit   909926       34c   126335   135.0       4  formal affair   \n",
       "3  fit   151944       34b   616682   145.0       5        wedding   \n",
       "4  fit   734848       32b   364092   138.0       4           date   \n",
       "\n",
       "                                         review_text          body_type  \\\n",
       "0  An adorable romper! Belt and zipper were a lit...          hourglass   \n",
       "1  I rented this dress for a photo shoot. The the...  straight & narrow   \n",
       "2  I rented this for my company's black tie award...               pear   \n",
       "3  I have always been petite in my upper body and...           athletic   \n",
       "4  Didn't actually wear it. It fit perfectly. The...           athletic   \n",
       "\n",
       "                                     review_summary category  height  size  \\\n",
       "0                              So many compliments!   romper  172.72    14   \n",
       "1                           I felt so glamourous!!!     gown  167.64    12   \n",
       "2  Dress arrived on time and in perfect condition.     dress  165.10     8   \n",
       "3                   Was in love with this dress !!!     gown  175.26    12   \n",
       "4                   Traditional with a touch a sass    dress  172.72     8   \n",
       "\n",
       "    age         review_date  \\\n",
       "0  28.0      April 20, 2016   \n",
       "1  36.0       June 18, 2013   \n",
       "2  34.0   February 12, 2014   \n",
       "3  27.0  September 26, 2016   \n",
       "4  45.0      April 30, 2016   \n",
       "\n",
       "                                    processed_review  \\\n",
       "0  ['ador', 'romper', 'belt', 'zipper', 'littl', ...   \n",
       "1  ['rent', 'dress', 'photo', 'shoot', 'theme', '...   \n",
       "2  ['rent', 'compani', 'black', 'tie', 'award', '...   \n",
       "3  ['alway', 'petit', 'upper', 'bodi', 'extrem', ...   \n",
       "4  ['actual', 'wear', 'fit', 'perfectli', 'fabric...   \n",
       "\n",
       "                                 processed_summary  sentiment_score  \\\n",
       "0                           ['mani', 'compliment']         0.625000   \n",
       "1                              ['felt', 'glamour']         0.000000   \n",
       "2  ['dress', 'arriv', 'time', 'perfect', 'condit']         1.000000   \n",
       "3                                ['love', 'dress']         0.976562   \n",
       "4                      ['tradit', 'touch', 'sass']         0.000000   \n",
       "\n",
       "   hybrid_rating  \n",
       "0       5.625000  \n",
       "1       5.000000  \n",
       "2       5.000000  \n",
       "3       5.976562  \n",
       "4       4.000000  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9bbf7a6b-0aa8-49f1-a818-8d7c201cc317",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2b6f1896-894e-4c1e-b9d4-5b9f8aa08ea2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>review_summary</th>\n",
       "      <th>sentiment_score</th>\n",
       "      <th>hybrid_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>So many compliments!</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>5.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>I felt so glamourous!!!</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>Dress arrived on time and in perfect condition.</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>Was in love with this dress !!!</td>\n",
       "      <td>0.976562</td>\n",
       "      <td>5.976562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Traditional with a touch a sass</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>LITERALLY THE CUTEST DRESS EVER</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5</td>\n",
       "      <td>Great dress, beautifully made.  I received lot...</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>5.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "      <td>Great for black tie event!</td>\n",
       "      <td>0.295833</td>\n",
       "      <td>5.295833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5</td>\n",
       "      <td>This dress was everything! It was perfect for ...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4</td>\n",
       "      <td>It was fun to wear a dress I wouldn't normally...</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>4.243750</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating                                     review_summary  sentiment_score  \\\n",
       "0       5                               So many compliments!         0.625000   \n",
       "1       5                            I felt so glamourous!!!         0.000000   \n",
       "2       4   Dress arrived on time and in perfect condition.          1.000000   \n",
       "3       5                    Was in love with this dress !!!         0.976562   \n",
       "4       4                    Traditional with a touch a sass         0.000000   \n",
       "5       5                    LITERALLY THE CUTEST DRESS EVER         0.000000   \n",
       "6       5  Great dress, beautifully made.  I received lot...         0.900000   \n",
       "7       5                         Great for black tie event!         0.295833   \n",
       "8       5  This dress was everything! It was perfect for ...         1.000000   \n",
       "9       4  It was fun to wear a dress I wouldn't normally...         0.243750   \n",
       "\n",
       "   hybrid_rating  \n",
       "0       5.625000  \n",
       "1       5.000000  \n",
       "2       5.000000  \n",
       "3       5.976562  \n",
       "4       4.000000  \n",
       "5       5.000000  \n",
       "6       5.900000  \n",
       "7       5.295833  \n",
       "8       6.000000  \n",
       "9       4.243750  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from textblob import TextBlob  # For sentiment analysis\n",
    "\n",
    "# Calculate sentiment scores for review summaries\n",
    "df['sentiment_score'] = df['review_summary'].apply(lambda x: TextBlob(str(x)).sentiment.polarity)\n",
    "\n",
    "# Combine rating and sentiment to create hybrid_rating\n",
    "df['hybrid_rating'] = df['rating'] + df['sentiment_score']\n",
    "\n",
    "# Display the modified DataFrame\n",
    "df[['rating', 'review_summary', 'sentiment_score', 'hybrid_rating']].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2e3c192e-a4e6-40b3-9cd7-ca7ef3d3cbf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 0.8387\n",
      "Root Mean Squared Error (RMSE): 0.8387131725835293\n"
     ]
    }
   ],
   "source": [
    "from surprise import Dataset, Reader, SVD\n",
    "from surprise.model_selection import train_test_split\n",
    "from surprise import accuracy\n",
    "\n",
    "# Assuming df3 is your DataFrame with the hybrid_rating column\n",
    "reader = Reader(rating_scale=(df['hybrid_rating'].min(), df['hybrid_rating'].max()))\n",
    "data = Dataset.load_from_df(df[['user_id', 'item_id', 'hybrid_rating']], reader)\n",
    "\n",
    "# Split the dataset\n",
    "trainset, testset = train_test_split(data, test_size=0.2)\n",
    "\n",
    "# Use SVD as an example collaborative filtering algorithm\n",
    "model = SVD()\n",
    "model.fit(trainset)\n",
    "\n",
    "# Make predictions on the test set\n",
    "predictions = model.test(testset)\n",
    "\n",
    "# Evaluate the model\n",
    "rmse = accuracy.rmse(predictions)\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "41101441-6526-4df0-bc66-f2a16222e55a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Prediction(uid='328254', iid='1505652', r_ui='4.15', est=4.998800971890956, details={'was_impossible': False})"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making a prediction\n",
    "user_328254_prediction = model.predict(\"328254\", \"1505652\", \"4.15\" )\n",
    "user_328254_prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "52000b53-5d3f-4578-8fbe-ff51aa880a65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fit</th>\n",
       "      <th>user_id</th>\n",
       "      <th>bust_size</th>\n",
       "      <th>item_id</th>\n",
       "      <th>weight</th>\n",
       "      <th>rating</th>\n",
       "      <th>rented_for</th>\n",
       "      <th>review_text</th>\n",
       "      <th>body_type</th>\n",
       "      <th>review_summary</th>\n",
       "      <th>category</th>\n",
       "      <th>height</th>\n",
       "      <th>size</th>\n",
       "      <th>age</th>\n",
       "      <th>review_date</th>\n",
       "      <th>processed_review</th>\n",
       "      <th>processed_summary</th>\n",
       "      <th>sentiment_score</th>\n",
       "      <th>hybrid_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4044</th>\n",
       "      <td>large</td>\n",
       "      <td>328254</td>\n",
       "      <td>32b</td>\n",
       "      <td>1453647</td>\n",
       "      <td>120.0</td>\n",
       "      <td>5</td>\n",
       "      <td>other</td>\n",
       "      <td>Loved this dress! Very comfortable, works with...</td>\n",
       "      <td>straight &amp; narrow</td>\n",
       "      <td>Comfort - many compliments.</td>\n",
       "      <td>dress</td>\n",
       "      <td>162.56</td>\n",
       "      <td>4</td>\n",
       "      <td>32.0</td>\n",
       "      <td>August 28, 2017</td>\n",
       "      <td>['love', 'dress', 'comfort', 'work', 'straples...</td>\n",
       "      <td>['comfort', 'mani', 'compliment']</td>\n",
       "      <td>0.50</td>\n",
       "      <td>5.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192337</th>\n",
       "      <td>fit</td>\n",
       "      <td>328254</td>\n",
       "      <td>32b</td>\n",
       "      <td>1505652</td>\n",
       "      <td>120.0</td>\n",
       "      <td>4</td>\n",
       "      <td>other</td>\n",
       "      <td>Fit was great - as described.</td>\n",
       "      <td>straight &amp; narrow</td>\n",
       "      <td>Rented this for the Christening of our daughte...</td>\n",
       "      <td>maxi</td>\n",
       "      <td>162.56</td>\n",
       "      <td>4</td>\n",
       "      <td>32.0</td>\n",
       "      <td>August 21, 2017</td>\n",
       "      <td>['fit', 'great', 'describ']</td>\n",
       "      <td>['rent', 'christen', 'daughter', 'bodi', 'norm...</td>\n",
       "      <td>0.15</td>\n",
       "      <td>4.15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          fit  user_id bust_size  item_id  weight  rating rented_for  \\\n",
       "4044    large   328254       32b  1453647   120.0       5      other   \n",
       "192337    fit   328254       32b  1505652   120.0       4      other   \n",
       "\n",
       "                                              review_text          body_type  \\\n",
       "4044    Loved this dress! Very comfortable, works with...  straight & narrow   \n",
       "192337                     Fit was great - as described.   straight & narrow   \n",
       "\n",
       "                                           review_summary category  height  \\\n",
       "4044                          Comfort - many compliments.    dress  162.56   \n",
       "192337  Rented this for the Christening of our daughte...     maxi  162.56   \n",
       "\n",
       "        size   age      review_date  \\\n",
       "4044       4  32.0  August 28, 2017   \n",
       "192337     4  32.0  August 21, 2017   \n",
       "\n",
       "                                         processed_review  \\\n",
       "4044    ['love', 'dress', 'comfort', 'work', 'straples...   \n",
       "192337                        ['fit', 'great', 'describ']   \n",
       "\n",
       "                                        processed_summary  sentiment_score  \\\n",
       "4044                    ['comfort', 'mani', 'compliment']             0.50   \n",
       "192337  ['rent', 'christen', 'daughter', 'bodi', 'norm...             0.15   \n",
       "\n",
       "        hybrid_rating  \n",
       "4044             5.50  \n",
       "192337           4.15  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['user_id']==328254]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "05390727-70ce-41f4-8832-3c6ab059fa90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameters: {'n_epochs': 5, 'lr_all': 0.002, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8505382262870461\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.002, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8503404489872098\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.002, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8504048918108459\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.005, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8453631975633793\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.005, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8450370854967771\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.005, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8440079975744145\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.01, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8423341449918836\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.01, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8418868917239543\n",
      "\n",
      "Parameters: {'n_epochs': 5, 'lr_all': 0.01, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8404109466841563\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.002, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.84663791991077\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.002, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8459798262309928\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.002, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8455853514439639\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.005, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8433829061229705\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.005, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8416823481571506\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.005, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8403338417280061\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.01, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8430776962021844\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.01, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8401375508921279\n",
      "\n",
      "Parameters: {'n_epochs': 10, 'lr_all': 0.01, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.838345494616025\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.002, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8444103128771715\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.002, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8434622091809655\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.002, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8432783009797564\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.005, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8418697314220106\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.005, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8406050078841977\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.005, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8388957977505545\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.01, 'reg_all': 0.02}\n",
      "Mean RMSE across folds: 0.8460972350313533\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.01, 'reg_all': 0.1}\n",
      "Mean RMSE across folds: 0.8409779097736617\n",
      "\n",
      "Parameters: {'n_epochs': 15, 'lr_all': 0.01, 'reg_all': 0.4}\n",
      "Mean RMSE across folds: 0.8380292962569723\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from surprise.model_selection import cross_validate\n",
    "from surprise import SVD\n",
    "\n",
    "# Define parameter combinations to try\n",
    "param_combinations = {'n_epochs': [5, 10, 15], 'lr_all': [0.002, 0.005, 0.01], 'reg_all': [0.02, 0.1, 0.4]}\n",
    "\n",
    "# Load the dataset\n",
    "data = Dataset.load_from_df(df[['user_id', 'item_id', 'hybrid_rating']], reader)\n",
    "\n",
    "# Iterate over parameter combinations\n",
    "for n_epochs in param_combinations['n_epochs']:\n",
    "    for lr_all in param_combinations['lr_all']:\n",
    "        for reg_all in param_combinations['reg_all']:\n",
    "            # Create SVD model with current parameters\n",
    "            svd_model = SVD(n_epochs=n_epochs, lr_all=lr_all, reg_all=reg_all)\n",
    "\n",
    "            # Cross-validate the model\n",
    "            results = cross_validate(svd_model, data, measures=['RMSE'], cv=3, verbose=False)\n",
    "\n",
    "            # Print results\n",
    "            print(f\"Parameters: {{'n_epochs': {n_epochs}, 'lr_all': {lr_all}, 'reg_all': {reg_all}}}\")\n",
    "            print(f\"Mean RMSE across folds: {results['test_rmse'].mean()}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "347e29f4-fc44-4f19-a863-2c74097f9f6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<surprise.prediction_algorithms.matrix_factorization.SVD at 0x1851e495eb0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create the final SVD model with optimal parameters\n",
    "final_svd_model = SVD(n_epochs=10, lr_all=0.01, reg_all=0.4)\n",
    "\n",
    "# Load the dataset\n",
    "data = Dataset.load_from_df(df[['user_id', 'item_id', 'hybrid_rating']], reader)\n",
    "\n",
    "# Build the full training set\n",
    "trainset = data.build_full_trainset()\n",
    "\n",
    "# Train the final model on the entire dataset\n",
    "final_svd_model.fit(trainset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "06a421d4-e908-4409-8626-9bc8e34af912",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Prediction(uid='328254', iid='1505652', r_ui='4.15', est=5.000428442407513, details={'was_impossible': False})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Making a prediction\n",
    "user_328254_prediction = final_svd_model.predict(\"328254\", \"1505652\", \"4.15\" )\n",
    "user_328254_prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c700d337-8b3c-4922-b360-211c6c77fc2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean RMSE across folds: 0.8411397545200341\n",
      "Top 10 Recommendations for User 420272:\n",
      "Item ID: 1547051, Predicted Rating: 5.407529026391013\n",
      "Item ID: 1925838, Predicted Rating: 5.34046443198966\n",
      "Item ID: 1260666, Predicted Rating: 5.333793005151888\n",
      "Item ID: 1120148, Predicted Rating: 5.328487940680031\n",
      "Item ID: 1200223, Predicted Rating: 5.32540962777979\n",
      "Item ID: 242661, Predicted Rating: 5.307917468931255\n",
      "Item ID: 720017, Predicted Rating: 5.3076623014734015\n",
      "Item ID: 2044701, Predicted Rating: 5.30632633309951\n",
      "Item ID: 1635675, Predicted Rating: 5.304513315656678\n",
      "Item ID: 1409027, Predicted Rating: 5.300898314978044\n"
     ]
    }
   ],
   "source": [
    "from surprise import Dataset, Reader\n",
    "from surprise.model_selection import cross_validate\n",
    "from surprise.prediction_algorithms.matrix_factorization import SVD\n",
    "\n",
    "df3 = df\n",
    "\n",
    "# Load the dataset\n",
    "reader = Reader(rating_scale=(df3['hybrid_rating'].min(), df3['hybrid_rating'].max()))\n",
    "data = Dataset.load_from_df(df3[['user_id', 'item_id', 'hybrid_rating']], reader)\n",
    "\n",
    "# Define the SVD model with ALS optimization\n",
    "als_model = SVD(n_factors=50, reg_all=0.02, biased=True)\n",
    "\n",
    "# Evaluate the SVD model using cross-validation\n",
    "cv_results = cross_validate(als_model, data, measures=['RMSE'], cv=3, verbose=False)\n",
    "\n",
    "# Print the mean RMSE across folds\n",
    "print(f\"Mean RMSE across folds: {cv_results['test_rmse'].mean()}\")\n",
    "\n",
    "# Build the full training set\n",
    "trainset = data.build_full_trainset()\n",
    "\n",
    "# Train the SVD model on the entire dataset\n",
    "als_model.fit(trainset)\n",
    "\n",
    "# Make predictions for a specific user (replace user_id with an actual user ID)\n",
    "user_id_to_predict = 420272\n",
    "item_ids_to_predict = df3['item_id'].unique()\n",
    "\n",
    "# Get predictions for the specified user and items\n",
    "predictions = [als_model.predict(user_id_to_predict, item_id) for item_id in item_ids_to_predict]\n",
    "\n",
    "# Extract item IDs and predicted ratings\n",
    "predicted_ratings = [(prediction.iid, prediction.est) for prediction in predictions]\n",
    "\n",
    "# Sort the predictions by rating in descending order\n",
    "sorted_predictions = sorted(predicted_ratings, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "# Display the top N recommended items\n",
    "top_n = 10\n",
    "top_recommendations = sorted_predictions[:top_n]\n",
    "print(f\"Top {top_n} Recommendations for User {user_id_to_predict}:\")\n",
    "for item_id, rating in top_recommendations:\n",
    "    print(f\"Item ID: {item_id}, Predicted Rating: {rating}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2ef03f96-6aeb-454b-94f4-f093c3107495",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Reduce the sample size\n",
    "sample_size = 20000\n",
    "df_sample = df3.sample(n=sample_size, random_state=42)\n",
    "# df_sample = df\n",
    "\n",
    "# Combine relevant text features into a single column for content-based filtering\n",
    "df_sample['content'] = df_sample['review_summary'].fillna('') + ' ' + df_sample['category'].fillna('') + ' ' \n",
    "+ df_sample['body_type'].fillna('') + ' ' + df_sample['rented_for'].fillna('')\n",
    "\n",
    "# Create a TF-IDF vectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
    "\n",
    "# Fit and transform the content column\n",
    "tfidf_matrix = tfidf_vectorizer.fit_transform(df_sample['content'])\n",
    "\n",
    "# Implement batch processing for cosine similarity\n",
    "def calculate_cosine_similarity_in_batches(matrix, batch_size=1000):\n",
    "    num_items = matrix.shape[0]\n",
    "    cosine_sim_batches = []\n",
    "\n",
    "    for i in range(0, num_items, batch_size):\n",
    "        start_idx = i\n",
    "        end_idx = min((i + batch_size), num_items)\n",
    "        batch_matrix = matrix[start_idx:end_idx, :]\n",
    "        cosine_sim_batch = cosine_similarity(batch_matrix, matrix, dense_output=False)\n",
    "        cosine_sim_batches.append(cosine_sim_batch)\n",
    "\n",
    "    return np.vstack(cosine_sim_batches)\n",
    "\n",
    "# Calculate cosine similarity in batches\n",
    "cosine_sim = calculate_cosine_similarity_in_batches(tfidf_matrix)\n",
    "\n",
    "# Apply dimensionality reduction using TruncatedSVD\n",
    "num_components = 100\n",
    "svd = TruncatedSVD(n_components=num_components)\n",
    "tfidf_matrix_reduced = svd.fit_transform(tfidf_matrix)\n",
    "cosine_sim_reduced = cosine_similarity(tfidf_matrix_reduced, dense_output=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6d7247da-0afa-458c-9700-124575e0d39f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to get content-based recommendations for a given item after dimensionality reduction\n",
    "def get_content_based_recommendations_reduced(item_id, cosine_sim=cosine_sim_reduced, df=df_sample, svd=svd):\n",
    "    idx = df[df['item_id'] == item_id].index[0]\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "    sim_scores = sim_scores[1:11]  # Exclude the item itself and take top 10\n",
    "    item_indices = [score[0] for score in sim_scores]\n",
    "    return df['item_id'].iloc[item_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4c6c3a2f-73f5-4257-9258-155ce78d404e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12393     1973037\n",
       "87047     1773535\n",
       "145039     126335\n",
       "78556      137585\n",
       "60550      714374\n",
       "Name: item_id, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the items in df_sample\n",
    "df_sample['item_id'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "57245d98-38c7-4798-b9ef-dcded818d927",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Content-Based Recommendations (Reduced) for Item 1973037:\n",
      "95304     1285647\n",
      "120710    1295171\n",
      "186237    1172052\n",
      "31235      144727\n",
      "124600    1348294\n",
      "112918    1484078\n",
      "112687    1949394\n",
      "183352    1786364\n",
      "187589    1063761\n",
      "166993     471376\n",
      "Name: item_id, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Example: Get content-based recommendations for an item\n",
    "item_id_to_recommend_for = 1973037\n",
    "content_based_recommendations_reduced = get_content_based_recommendations_reduced(item_id_to_recommend_for)\n",
    "\n",
    "# Display the recommendations\n",
    "print(f\"Content-Based Recommendations (Reduced) for Item {item_id_to_recommend_for}:\")\n",
    "print(content_based_recommendations_reduced)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "37ee7a83-b5cb-4cb4-8ad5-3ebda9a73a0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fit</th>\n",
       "      <th>user_id</th>\n",
       "      <th>bust_size</th>\n",
       "      <th>item_id</th>\n",
       "      <th>weight</th>\n",
       "      <th>rating</th>\n",
       "      <th>rented_for</th>\n",
       "      <th>review_text</th>\n",
       "      <th>body_type</th>\n",
       "      <th>review_summary</th>\n",
       "      <th>category</th>\n",
       "      <th>height</th>\n",
       "      <th>size</th>\n",
       "      <th>age</th>\n",
       "      <th>review_date</th>\n",
       "      <th>processed_review</th>\n",
       "      <th>processed_summary</th>\n",
       "      <th>sentiment_score</th>\n",
       "      <th>hybrid_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>large</td>\n",
       "      <td>863479</td>\n",
       "      <td>34c</td>\n",
       "      <td>1973037</td>\n",
       "      <td>125.0</td>\n",
       "      <td>4</td>\n",
       "      <td>formal affair</td>\n",
       "      <td>A little baggy in the bust (thus the \"runs lar...</td>\n",
       "      <td>athletic</td>\n",
       "      <td>Accentuates curves in right places</td>\n",
       "      <td>dress</td>\n",
       "      <td>172.72</td>\n",
       "      <td>8</td>\n",
       "      <td>42.0</td>\n",
       "      <td>September 20, 2017</td>\n",
       "      <td>['littl', 'baggi', 'bust', 'thu', 'run', 'larg...</td>\n",
       "      <td>['accentu', 'curv', 'right', 'place']</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>4.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4842</th>\n",
       "      <td>fit</td>\n",
       "      <td>473478</td>\n",
       "      <td>34d</td>\n",
       "      <td>1973037</td>\n",
       "      <td>128.0</td>\n",
       "      <td>5</td>\n",
       "      <td>wedding</td>\n",
       "      <td>dress was super very tight and definitely show...</td>\n",
       "      <td>full bust</td>\n",
       "      <td>dress fit amazing!</td>\n",
       "      <td>dress</td>\n",
       "      <td>165.10</td>\n",
       "      <td>8</td>\n",
       "      <td>28.0</td>\n",
       "      <td>June 23, 2015</td>\n",
       "      <td>['dress', 'super', 'tight', 'definit', 'show',...</td>\n",
       "      <td>['dress', 'fit', 'amaz']</td>\n",
       "      <td>0.575000</td>\n",
       "      <td>5.575000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7361</th>\n",
       "      <td>fit</td>\n",
       "      <td>412690</td>\n",
       "      <td>34b</td>\n",
       "      <td>1973037</td>\n",
       "      <td>127.0</td>\n",
       "      <td>5</td>\n",
       "      <td>wedding</td>\n",
       "      <td>This dress will suck you in and keep everythin...</td>\n",
       "      <td>hourglass</td>\n",
       "      <td>Loved the dress!</td>\n",
       "      <td>dress</td>\n",
       "      <td>162.56</td>\n",
       "      <td>8</td>\n",
       "      <td>30.0</td>\n",
       "      <td>November 1, 2015</td>\n",
       "      <td>['dress', 'suck', 'keep', 'everyth', 'place', ...</td>\n",
       "      <td>['love', 'dress']</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>5.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9018</th>\n",
       "      <td>small</td>\n",
       "      <td>123588</td>\n",
       "      <td>32c</td>\n",
       "      <td>1973037</td>\n",
       "      <td>110.0</td>\n",
       "      <td>4</td>\n",
       "      <td>wedding</td>\n",
       "      <td>This was a (major upgrade) replacement dress f...</td>\n",
       "      <td>petite</td>\n",
       "      <td>For a combination of sexy, whimsical, and deta...</td>\n",
       "      <td>dress</td>\n",
       "      <td>157.48</td>\n",
       "      <td>4</td>\n",
       "      <td>30.0</td>\n",
       "      <td>May 30, 2015</td>\n",
       "      <td>['major', 'upgrad', 'replac', 'dress', 'dress'...</td>\n",
       "      <td>['combin', 'sexi', 'whimsic', 'detail', 'orien...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9945</th>\n",
       "      <td>fit</td>\n",
       "      <td>114276</td>\n",
       "      <td>34b</td>\n",
       "      <td>1973037</td>\n",
       "      <td>140.0</td>\n",
       "      <td>3</td>\n",
       "      <td>wedding</td>\n",
       "      <td>No surprise, this dress is very unforgiving.  ...</td>\n",
       "      <td>pear</td>\n",
       "      <td>Classy herve leger style</td>\n",
       "      <td>dress</td>\n",
       "      <td>172.72</td>\n",
       "      <td>14</td>\n",
       "      <td>34.0</td>\n",
       "      <td>April 20, 2015</td>\n",
       "      <td>['surpris', 'dress', 'unforgiv', 'thank', 'dar...</td>\n",
       "      <td>['classi', 'herv', 'leger', 'style']</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>3.100000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        fit  user_id bust_size  item_id  weight  rating     rented_for  \\\n",
       "172   large   863479       34c  1973037   125.0       4  formal affair   \n",
       "4842    fit   473478       34d  1973037   128.0       5        wedding   \n",
       "7361    fit   412690       34b  1973037   127.0       5        wedding   \n",
       "9018  small   123588       32c  1973037   110.0       4        wedding   \n",
       "9945    fit   114276       34b  1973037   140.0       3        wedding   \n",
       "\n",
       "                                            review_text  body_type  \\\n",
       "172   A little baggy in the bust (thus the \"runs lar...   athletic   \n",
       "4842  dress was super very tight and definitely show...  full bust   \n",
       "7361  This dress will suck you in and keep everythin...  hourglass   \n",
       "9018  This was a (major upgrade) replacement dress f...     petite   \n",
       "9945  No surprise, this dress is very unforgiving.  ...       pear   \n",
       "\n",
       "                                         review_summary category  height  \\\n",
       "172                  Accentuates curves in right places    dress  172.72   \n",
       "4842                                 dress fit amazing!    dress  165.10   \n",
       "7361                                  Loved the dress!     dress  162.56   \n",
       "9018  For a combination of sexy, whimsical, and deta...    dress  157.48   \n",
       "9945                           Classy herve leger style    dress  172.72   \n",
       "\n",
       "      size   age         review_date  \\\n",
       "172      8  42.0  September 20, 2017   \n",
       "4842     8  28.0       June 23, 2015   \n",
       "7361     8  30.0    November 1, 2015   \n",
       "9018     4  30.0        May 30, 2015   \n",
       "9945    14  34.0      April 20, 2015   \n",
       "\n",
       "                                       processed_review  \\\n",
       "172   ['littl', 'baggi', 'bust', 'thu', 'run', 'larg...   \n",
       "4842  ['dress', 'super', 'tight', 'definit', 'show',...   \n",
       "7361  ['dress', 'suck', 'keep', 'everyth', 'place', ...   \n",
       "9018  ['major', 'upgrad', 'replac', 'dress', 'dress'...   \n",
       "9945  ['surpris', 'dress', 'unforgiv', 'thank', 'dar...   \n",
       "\n",
       "                                      processed_summary  sentiment_score  \\\n",
       "172               ['accentu', 'curv', 'right', 'place']         0.285714   \n",
       "4842                           ['dress', 'fit', 'amaz']         0.575000   \n",
       "7361                                  ['love', 'dress']         0.875000   \n",
       "9018  ['combin', 'sexi', 'whimsic', 'detail', 'orien...         0.000000   \n",
       "9945               ['classi', 'herv', 'leger', 'style']         0.100000   \n",
       "\n",
       "      hybrid_rating  \n",
       "172        4.285714  \n",
       "4842       5.575000  \n",
       "7361       5.875000  \n",
       "9018       4.000000  \n",
       "9945       3.100000  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_id_to_view = 1973037\n",
    "item_raw = df3[df3['item_id'] == item_id_to_view]\n",
    "item_raw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd0cccec-f987-40c7-a848-26a32538b002",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1839872f-b160-45c3-b9ed-9783121bb298",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "from surprise import SVD, Dataset, Reader\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cf3a9c98-0656-4dee-b767-a7a436dfad51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import streamlit as st\n",
    "# from surprise import SVD, Dataset, Reader\n",
    "# from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "# from sklearn.decomposition import TruncatedSVD\n",
    "# from sklearn.metrics.pairwise import cosine_similarity\n",
    "# import pandas as pd\n",
    "# import numpy as np\n",
    "# import joblib\n",
    "\n",
    "# # Load SVD model\n",
    "# final_svd_model = SVD(n_epochs=10, lr_all=0.01, reg_all=0.4)\n",
    "\n",
    "# # Load content-based model\n",
    "# def train_content_based_model(df):\n",
    "#     sample_size = 20000\n",
    "#     df_sample = df.sample(n=sample_size, random_state=42)\n",
    "\n",
    "#     # Combine relevant text features into a single column for content-based filtering\n",
    "#     df_sample['content'] = df_sample['review_summary'].fillna('') + ' ' + df_sample['category'].fillna('') + ' ' \\\n",
    "#                            + df_sample['body_type'].fillna('') + ' ' + df_sample['rented_for'].fillna('')\n",
    "\n",
    "#     # Create a TF-IDF vectorizer\n",
    "#     tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
    "\n",
    "#     # Fit and transform the content column\n",
    "#     tfidf_matrix = tfidf_vectorizer.fit_transform(df_sample['content'])\n",
    "\n",
    "#     # Implement batch processing for cosine similarity\n",
    "#     def calculate_cosine_similarity_in_batches(matrix, batch_size=1000):\n",
    "#         num_items = matrix.shape[0]\n",
    "#         cosine_sim_batches = []\n",
    "\n",
    "#         for i in range(0, num_items, batch_size):\n",
    "#             start_idx = i\n",
    "#             end_idx = min((i + batch_size), num_items)\n",
    "#             batch_matrix = matrix[start_idx:end_idx, :]\n",
    "#             cosine_sim_batch = cosine_similarity(batch_matrix, matrix, dense_output=False)\n",
    "#             cosine_sim_batches.append(cosine_sim_batch)\n",
    "\n",
    "#         return np.vstack(cosine_sim_batches)\n",
    "\n",
    "#     # Calculate cosine similarity in batches\n",
    "#     cosine_sim = calculate_cosine_similarity_in_batches(tfidf_matrix)\n",
    "\n",
    "#     # Apply dimensionality reduction using TruncatedSVD\n",
    "#     num_components = 100\n",
    "#     svd = TruncatedSVD(n_components=num_components)\n",
    "#     tfidf_matrix_reduced = svd.fit_transform(tfidf_matrix)\n",
    "#     cosine_sim_reduced = cosine_similarity(tfidf_matrix_reduced, dense_output=False)\n",
    "\n",
    "#     # Save the content-based model\n",
    "#     joblib.dump((cosine_sim_reduced, df_sample['item_id']), 'content_based_model.pkl')\n",
    "\n",
    "#     return cosine_sim_reduced, df_sample['item_id']\n",
    "\n",
    "# # Streamlit App\n",
    "# st.title(\"Fashion Recommender System\")\n",
    "\n",
    "# # Sidebar with input options\n",
    "# st.sidebar.header(\"User Input Features\")\n",
    "\n",
    "# # Add input options based on your model features (e.g., body type, rented for, etc.)\n",
    "# user_input = {}\n",
    "# user_input['Body Type'] = st.sidebar.selectbox('Select Body Type', df_clean['body_type'].unique())\n",
    "# user_input['Rented For'] = st.sidebar.selectbox('Select Rented For', df_clean['rented_for'].unique())\n",
    "# # Add more input options as needed...\n",
    "\n",
    "# # Add a button to trigger recommendations\n",
    "# if st.sidebar.button('Get Recommendations'):\n",
    "#     # Load content-based model\n",
    "#     content_based_model, item_ids = train_content_based_model(df_clean)\n",
    "\n",
    "#     # Function to get content-based recommendations for a given item after dimensionality reduction\n",
    "#     def get_content_based_recommendations_reduced(item_id, cosine_sim=content_based_model, df=df_clean, item_ids=item_ids):\n",
    "#         idx = item_ids[item_ids == item_id].index[0]\n",
    "#         sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "#         sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "#         sim_scores = sim_scores[1:11]  # Exclude the item itself and take top 10\n",
    "#         item_indices = [score[0] for score in sim_scores]\n",
    "#         return df['item_id'].iloc[item_indices]\n",
    "\n",
    "#     # Example: Get content-based recommendations for an item\n",
    "#     item_id_to_recommend_for = 1973037\n",
    "#     content_based_recommendations_reduced = get_content_based_recommendations_reduced(item_id_to_recommend_for)\n",
    "\n",
    "#     # Display the recommendations\n",
    "#     st.write(f\"Content-Based Recommendations (Reduced) for Item {item_id_to_recommend_for}:\")\n",
    "#     st.write(content_based_recommendations_reduced)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "292a8228-c87e-4c6c-97af-408aac89ebb0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8f875bd7-c09e-4e32-934e-bf0c1227af09",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-12-13 17:44:15.348 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\ONES\\anaconda3\\envs\\learn-env\\lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    st.title(\"Fashion Recommender System\")\n",
    "\n",
    "    # Add input elements (e.g., sliders, dropdowns) for user features\n",
    "    # Example: category, body_type, rented_for\n",
    "    category = st.selectbox(\"Select category:\", df['category'].unique())\n",
    "    body_type = st.selectbox(\"Select body type:\", df['body_type'].unique())\n",
    "    rented_for = st.selectbox(\"Select rented for:\", df['rented_for'].unique())\n",
    "\n",
    "    # Add a button to trigger recommendations\n",
    "    if st.button(\"Get Recommendations\"):\n",
    "        # Call the recommendation function and display the results\n",
    "        recommendations = get_recommendations(category, body_type, rented_for)\n",
    "        st.write(\"Recommendations:\")\n",
    "        st.write(recommendations)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6a1ed75d-8c44-4384-8cb5-807bc644e263",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_recommendations(category, body_type, rented_for):\n",
    "    # Filter the dataset based on user inputs\n",
    "    filtered_data = df[(df['category'] == category) & (df['body_type'] == body_type) & (df['rented_for'] == rented_for)]\n",
    "\n",
    "    if filtered_data.empty:\n",
    "        return \"No recommendations available for the selected criteria.\"\n",
    "\n",
    "    # Get user-specific recommendations from collaborative filtering\n",
    "    user_id_to_predict = 420272  # Replace with an actual user ID\n",
    "    item_ids_to_predict = filtered_data['item_id'].unique()\n",
    "\n",
    "    predictions_collab = [als_model.predict(user_id_to_predict, item_id) for item_id in item_ids_to_predict]\n",
    "    predicted_ratings_collab = [(prediction.iid, prediction.est) for prediction in predictions_collab]\n",
    "\n",
    "    # Sort collaborative filtering predictions by rating in descending order\n",
    "    sorted_predictions_collab = sorted(predicted_ratings_collab, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "    # Get content-based recommendations for a sample item (replace with user-specific item)\n",
    "    sample_item_id = filtered_data['item_id'].iloc[0]\n",
    "    content_based_recommendations = get_content_based_recommendations_reduced(sample_item_id)\n",
    "\n",
    "    # Combine collaborative filtering and content-based recommendations\n",
    "    combined_recommendations = sorted_predictions_collab + content_based_recommendations.tolist()\n",
    "\n",
    "    # Deduplicate and sort the combined recommendations\n",
    "    unique_recommendations = list(set(combined_recommendations))\n",
    "    sorted_recommendations = sorted(unique_recommendations, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "    # Return the top N recommendations\n",
    "    top_n = 10\n",
    "    return sorted_recommendations[:top_n]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df494129-ce91-4c71-9080-f9ba09932759",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ed3038f-049b-43a1-97f8-60fd2d932e24",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
